#!/usr/bin/env python3

import pandas as pd
from bookmaker.functions import (
    fn_get_seasons_calendars,
    fn_get_database_game_ids,
    fn_compare_id,
    fn_batch_scrapping_insert,
    fn_insert_new_teams
)
from datetime import datetime

def main(competition_ids: list, seasons: list, max_gameweek: int = None):
    
    print(f'Program executed at: {datetime.now().strftime("%H:%M:%S")}')

    # Calendars scrapping
    df_fbref_data = fn_get_seasons_calendars(competition_ids=competition_ids, seasons=seasons, max_gameweek=max_gameweek, use_proxy=True)
    print(f'Calendars successfully scrapped.')
    
    # Get the corresponding games from the database
    df_games_db = fn_get_database_game_ids(competition_ids, seasons)

    # Check if there are new games
    df_new_games = fn_compare_id(df_games_db, df_fbref_data)
    if df_new_games.empty:
        message = 'No new game to insert.'
        print(message)
        return message
    else:
        print(f'{df_new_games.shape[0]} new game(s) to insert')
    
    # Create new teams if necessary
    fn_insert_new_teams(df_new_games)

    # Get and insert games & game_reports
    fn_batch_scrapping_insert(df_new_games)

    print(f'Program finished at: {datetime.now().strftime("%H:%M:%S")}')
    return 


if __name__ == "__main__":
    # Make competitions and seasons as list
    competition_ids = [20] # [11, 9, 12, 13, 20] # 9-PL 11-SerieA 12-LaLiga 13-Ligue1 20-Bundesligua
    seasons = ['2019-2020', '2020-2021', '2021-2022', '2022-2023', '2023-2024', '2024-2025']

    main(competition_ids, seasons)

